Update the Actions and Action Types:

First, you need to define actions for loading and error states in your action types and action creators.

typescript
Copy code
// todoAction.ts

export const ADD_TODO_REQUEST = 'ADD_TODO_REQUEST';
export const ADD_TODO_SUCCESS = 'ADD_TODO_SUCCESS';
export const ADD_TODO_FAILURE = 'ADD_TODO_FAILURE';

export const REMOVE_TODO_REQUEST = 'REMOVE_TODO_REQUEST';
export const REMOVE_TODO_SUCCESS = 'REMOVE_TODO_SUCCESS';
export const REMOVE_TODO_FAILURE = 'REMOVE_TODO_FAILURE';

export const EDIT_TODO_REQUEST = 'EDIT_TODO_REQUEST';
export const EDIT_TODO_SUCCESS = 'EDIT_TODO_SUCCESS';
export const EDIT_TODO_FAILURE = 'EDIT_TODO_FAILURE';

// Action types for async operations
interface AddTodoRequestAction { type: typeof ADD_TODO_REQUEST; }
interface AddTodoSuccessAction { type: typeof ADD_TODO_SUCCESS; payload: Todo; }
interface AddTodoFailureAction { type: typeof ADD_TODO_FAILURE; payload: string; }

interface RemoveTodoRequestAction { type: typeof REMOVE_TODO_REQUEST; }
interface RemoveTodoSuccessAction { type: typeof REMOVE_TODO_SUCCESS; payload: number; }
interface RemoveTodoFailureAction { type: typeof REMOVE_TODO_FAILURE; payload: string; }

interface EditTodoRequestAction { type: typeof EDIT_TODO_REQUEST; }
interface EditTodoSuccessAction { type: typeof EDIT_TODO_SUCCESS; payload: Todo; }
interface EditTodoFailureAction { type: typeof EDIT_TODO_FAILURE; payload: string; }

export type TodoActionTypes =
  | AddTodoRequestAction
  | AddTodoSuccessAction
  | AddTodoFailureAction
  | RemoveTodoRequestAction
  | RemoveTodoSuccessAction
  | RemoveTodoFailureAction
  | EditTodoRequestAction
  | EditTodoSuccessAction
  | EditTodoFailureAction;
Update the Reducer to Handle New Actions:

Modify the todoReducer to handle the new actions for loading and error states.

typescript
Copy code
const todoReducer = (
  state = initialState,
  action: TodoActionTypes
): TodoState => {
  switch (action.type) {
    case ADD_TODO_REQUEST:
    case REMOVE_TODO_REQUEST:
    case EDIT_TODO_REQUEST:
      return {
        ...state,
        loading: true,
        error: ''
      };

    case ADD_TODO_SUCCESS:
      return {
        ...state,
        todos: [...state.todos, action.payload],
        loading: false,
        error: ''
      };

    case REMOVE_TODO_SUCCESS:
      return {
        ...state,
        todos: state.todos.filter((todo) => todo.id !== action.payload),
        loading: false,
        error: ''
      };

    case EDIT_TODO_SUCCESS:
      return {
        ...state,
        todos: state.todos.map((todo) =>
          todo.id === action.payload.id
            ? { ...todo, ...action.payload }
            : todo
        ),
        loading: false,
        error: ''
      };

    case ADD_TODO_FAILURE:
    case REMOVE_TODO_FAILURE:
    case EDIT_TODO_FAILURE:
      return {
        ...state,
        loading: false,
        error: action.payload
      };

    default:
      return state;
  }
};

export default todoReducer;
Handle Actions in Async Thunks or Middleware: